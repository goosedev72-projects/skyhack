"""
Module for extracting answers from Skysmart tasks.
"""

import asyncio
import base64
import re

from bs4 import BeautifulSoup
from sky_api.skysmart_api import SkysmartAPIClient


def remove_extra_newlines(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã newline.

    –î–∞–µ—à—å:
        text (str): —Ç–µ–∫—Å—Ç

    –ü–æ–ª—É—á–∞–µ—à—å:
        str: –¢–µ–∫—Å—Ç –±–µ–∑ newline-–æ–≤
    """
    return re.sub(r'\n+', '\n', text.strip())


class SkyAnswers:
    """
    –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç—ã

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        task_hash (str): –•—ç—à –∑–∞–¥–∞–Ω–∏—è
    """

    def __init__(self, task_hash: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        –ü–µ—Ä–µ–¥–∞–µ—à—å:
            task_hash (str): –•—ç—à –∑–∞–¥–∞–Ω–∏—è
        """
        self.task_hash = task_hash

    async def get_answers(self):
        """
        –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ö–µ—à–µ–º

        –ü–æ–ª—É—á–∞–µ—à—å:
            list: –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ —Å–ø–∏—Å—ã–≤–∞–π üò°
        """
        answers_list = []
        client = SkysmartAPIClient()

        try:
            tasks_uuids = await client.get_room(self.task_hash)

            # –°–æ–±–∏—Ä–∞–µ–º —É—Ä–æ–∂–∞–π
            tasks_html_coroutines = [client.get_task_html(uuid) for uuid in tasks_uuids]
            tasks_html_list = await asyncio.gather(*tasks_html_coroutines, return_exceptions=True)

            for idx, task_html in enumerate(tasks_html_list):
                if isinstance(task_html, Exception):
                    print(f"ü•≤ –ù–µ –ø–∞—Ä—Å–∏—Ç—Å—è HTML –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å UUID {tasks_uuids[idx]}: {task_html}")
                    continue
                soup = BeautifulSoup(task_html, 'html.parser')
                task_answer = self._get_task_answer(soup, idx + 1)
                answers_list.append(task_answer)
        except Exception as e:
            print(f"ü•≤ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–≤–∞–ª–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π {e}")
        finally:
            await client.close()

        return answers_list

    async def get_room_info(self):
        """
        –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ —Å —Ö–µ—à–µ–º –∑–∞–¥–∞–Ω–∏—è

        –ü–æ–ª—É—á–∞–µ–º:
            dict: JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        client = SkysmartAPIClient()
        try:
            room_info = await client.get_room_info(self.task_hash)
            return room_info
        except Exception as e:
            print(f"ü•≤ –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–≤–∞–ª–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π {e}")
            return None
        finally:
            await client.close()

    @staticmethod
    def _extract_task_question(soup):
        """
        –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å

        –ü–µ—Ä–µ–¥–∞–µ—à—å:
            soup (BeautifulSoup): –ö—Ä–∞—Å–∏–≤—ã–π —Å—É–ø—á–∏–∫ 4

        –ü–æ–ª—É—á–∞–µ—à—å:
            str: –°–∞–º –≤–æ–ø—Ä–æ—Å
        """
        instruction = soup.find("vim-instruction")
        return instruction.text.strip() if instruction else ""

    @staticmethod
    def _extract_task_full_question(soup):
        """
        –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è

        Args:
            soup (BeautifulSoup): –°—É–ø—á–∏–∫

        Returns:
            str: –ü–æ–ª–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        """
        elements_to_exclude = [
            'vim-instruction', 'vim-groups', 'vim-test-item',
            'vim-order-sentence-verify-item', 'vim-input-answers',
            'vim-select-item', 'vim-test-image-item', 'math-input-answer',
            'vim-dnd-text-drop', 'vim-dnd-group-drag', 'vim-groups-row',
            'vim-strike-out-item', 'vim-dnd-image-set-drag',
            'vim-dnd-image-drag', 'edu-open-answer'
        ]
        for element in soup.find_all(elements_to_exclude):
            element.decompose()
        return remove_extra_newlines(soup.get_text())

    def _get_task_answer(self, soup, task_number):
        """
        –ü–∞—Ä—Å–∏–º —Å—É–ø—á–∏–∫

        –ü–µ—Ä–µ–¥–∞–µ—à—å:
            soup (BeautifulSoup): –ó–∞–¥–∞–Ω–∏–µ –∏–∑ —Å—É–ø—á–∏–∫–∞
            task_number (int): –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è

        –ü–æ–ª—É—á–∞–µ—à—å:
            dict: –í—Å–µ —Ä–µ—à–µ–Ω–∏–µ –∏ —Å–∞–º–æ –∑–∞–¥–∞–Ω–∏–µ
        """
        answers = []

        # –ú–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for item in soup.find_all('vim-test-item', attrs={'correct': 'true'}):
            answers.append(item.get_text())

        # –ü–æ—Ä—è–¥–æ–∫ –≤ –º—ã—Å–ª—è—Ö
        for item in soup.find_all('vim-order-sentence-verify-item'):
            answers.append(item.get_text())

        # –í–≤–æ–¥
        for input_answer in soup.find_all('vim-input-answers'):
            input_item = input_answer.find('vim-input-item')
            if input_item:
                answers.append(input_item.get_text())

        # –í—ã–±–∏—Ä–∞–µ–º
        for select_item in soup.find_all('vim-select-item', attrs={'correct': 'true'}):
            answers.append(select_item.get_text())

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for image_item in soup.find_all('vim-test-image-item', attrs={'correct': 'true'}):
            answers.append(f"{image_item.get_text()} - –≤–µ—Ä–Ω–æ")

        # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ü•µ
        for math_answer in soup.find_all('math-input-answer'):
            answers.append(math_answer.get_text())

        # –ü–µ—Ä–µ—Ç—è–Ω–∏ —Ç–µ–∫—Å—Ç
        for drop in soup.find_all('vim-dnd-text-drop'):
            drag_ids = drop.get('drag-ids', '').split(',')
            for drag_id in drag_ids:
                drag = soup.find('vim-dnd-text-drag', attrs={'answer-id': drag_id})
                if drag:
                    answers.append(drag.get_text())

        # –ü–µ—Ä–µ—Ç—è–Ω–∏ –≥—Ä—É–ø–ø—ã
        for drag_group in soup.find_all('vim-dnd-group-drag'):
            answer_id = drag_group.get('answer-id')
            for group_item in soup.find_all('vim-dnd-group-item'):
                drag_ids = group_item.get('drag-ids', '').split(',')
                if answer_id in drag_ids:
                    answers.append(f"{group_item.get_text()} - {drag_group.get_text()}")

        # –†—è–¥—ã –≥—Ä—É–ø–ø
        for group_row in soup.find_all('vim-groups-row'):
            for group_item in group_row.find_all('vim-groups-item'):
                encoded_text = group_item.get('text')
                if encoded_text:
                    try:
                        decoded_text = base64.b64decode(encoded_text).decode('utf-8')
                        answers.append(decoded_text)
                    except Exception as e:
                        print(f"ü•≤ –î–µ–∫–æ–¥–µ—Ä Base64 —Å–≤–∞–ª–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {e}")

        # –°–¢–†–ê–ô–ö! üé≥
        for striked_item in soup.find_all('vim-strike-out-item', attrs={'striked': 'true'}):
            answers.append(striked_item.get_text())

        # –ü–µ—Ä–µ—Ç—è–Ω–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        for image_drag in soup.find_all('vim-dnd-image-set-drag'):
            answer_id = image_drag.get('answer-id')
            for image_drop in soup.find_all('vim-dnd-image-set-drop'):
                drag_ids = image_drop.get('drag-ids', '').split(',')
                if answer_id in drag_ids:
                    answers.append(f"{image_drop.get('image')} - {image_drag.get_text()}")

        # –ü–µ—Ä–µ—Ç—è–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for image_drag in soup.find_all('vim-dnd-image-drag'):
            answer_id = image_drag.get('answer-id')
            for image_drop in soup.find_all('vim-dnd-image-drop'):
                drag_ids = image_drop.get('drag-ids', '').split(',')
                if answer_id in drag_ids:
                    answers.append(f"{image_drop.get_text()} - {image_drag.get_text()}")

        # –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ
        if soup.find('edu-open-answer', attrs={'id': 'OA1'}):
            answers.append('ü•≤ –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')

        return {
            'question': self._extract_task_question(soup),
            'full_question': self._extract_task_full_question(soup),
            'answers': answers,
            'task_number': task_number,
        }
